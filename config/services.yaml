# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.theme_path: '%kernel.project_dir%/public/images/themes/'
    app.images: '%kernel.project_dir%/public/images/'
    app.theme_url: '/images/themes/'
    app.twitch_secret: '%env(resolve:TWITCH_CLIENT_SECRET)%'
    app.twitch_id: '%env(resolve:TWITCH_CLIENT_ID)%'
    uploads_dir_name: 'uploads'
    uploads_base_url: '%env(SITE_BASE_URL)%/%uploads_dir_name%'
    timezone: '%env(APP_TIMEZONE)%'
    app.twitch_redirect_uri: '%env(resolve:TWITCH_REDIRECT_URI)%'
    app.aws_s3_bucket_name: '%env(AWS_S3_BUCKET_NAME)%'
    app.aws_s3_custom.uri_prefix: 'https://%env(AWS_S3_BUCKET_NAME)%.%env(AWS_S3_DOMAIN)%'
    app.aws_access_key_id: '%env(AWS_ACCESS_KEY_ID)%'
    app.aws_secret_access_key: '%env(resolve:AWS_SECRET_ACCESS_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Containerizer/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Containerizer\ContainerizerFactory:
        arguments:
            - '@App\Service\TwitchApi'
            - '@App\Service\YouTubeApi'
            - '@Vich\UploaderBundle\Templating\Helper\UploaderHelper'
            - '@logger'

    admin.home_row:
        class: App\Admin\HomeRowAdmin
        arguments: [~, App\Entity\HomeRow, App\Controller\HomeRowAdminController ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\HomeRow, manager_type: orm, group: home, label: Rows }
        public: true
        calls:
            - ['addChild', ['@admin.home_row_item', 'homeRow']]

    admin.home_row_item:
        class: App\Admin\HomeRowItemAdmin
        arguments: [~, App\Entity\HomeRowItem, App\Controller\HomeRowItemAdminController ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\HomeRowItem, manager_type: orm, group: home, label: Containers }
        calls:
            - [ setTemplate, [ 'edit', 'homerowitem/edit.html.twig' ] ]
        public: true

    admin.theme:
        class: App\Admin\ThemeAdmin
        arguments: [~, App\Entity\Theme, ~]
        tags:
            - { name: sonata.admin, model_class: App\Entity\Theme, manager_type: orm, group: admin, label: Pages }
        public: true

    admin.site_settings:
        class: App\Admin\SiteSettingsAdmin
        arguments: [ ~, App\Entity\SiteSettings, App\Controller\ThemeSettingAdminController ]
        calls:
            - [ setTemplate, [ 'list', 'sitesetting/list.html.twig' ] ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\SiteSettings, manager_type: orm, group: admin, label: Site Settings }
        public: true

    admin.partner:
        class: App\Admin\PartnerAdmin
        arguments: [~, App\Entity\Partner, ~]
        tags:
            - { name: sonata.admin, model_class: App\Entity\Partner, manager_type: orm, group: admin, label: Partners }
        public: true

    admin.partner_role:
        class: App\Admin\PartnerRoleAdmin
        arguments: [~, App\Entity\PartnerRole, ~]
        tags:
            - { name: sonata.admin, model_class: App\Entity\PartnerRole, manager_type: orm, group: admin, label: Partner Roles }
        public: true

    admin.container_access_control:
        class: App\Admin\ContainerAccessControlAdmin
        arguments: [~, App\Entity\HomeRowItemOperation, App\Controller\ContainerAccessControlController ]
        tags:
            - { name: sonata.admin, model_class: App\Entity\HomeRowItemOperation, manager_type: orm, group: admin, label: Container access control }
        calls:
            - [ setTemplate, [ 'list', 'ContainerAccessControlAdmin/list.html.twig' ] ]
        public: true

    Aws\S3\S3Client:
        arguments:
            -
                version: '%env(resolve:AWS_S3_VERSION)%' # or 'latest'
                region: '%env(resolve:AWS_REGION)%' # 'eu-central-1' for example
                credentials:
                    key: '%env(resolve:AWS_ACCESS_KEY_ID)%'
                    secret: '%env(resolve:AWS_SECRET_ACCESS_KEY)%'

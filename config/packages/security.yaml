security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # -> custom firewall for the admin area of the URL
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       app_user_provider
                login_path:     app_login
                check_path:     app_login
                default_target_path: /
            access_denied_url:  /access-denied
            logout:
                path:           app_logout
                target:         /login

        # -> end custom configuration

        # This firewall is used to handle the public login area
        main:
            pattern:             .*
            context:             user
            form_login:
                provider:       app_user_provider
                login_path: app_login
                check_path: app_login
                failure_path:   null
                enable_csrf: true
            access_denied_url:  /access-denied
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

        # activate different ways to authenticate
        # https://symfony.com/doc/current/security.html#firewalls-authentication

        # https://symfony.com/doc/current/security/impersonating_user.html
        # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Admin login page needs to be accessed without credential
#        - { path: ^/admin/login, role: PUBLIC_ACCESS }
#        - { path: ^/admin/logout, role: PUBLIC_ACCESS }
#        - { path: ^/admin/login_check, role: PUBLIC_ACCESS }
#        - { path: ^/admin/resetting, role: PUBLIC_ACCESS }

        # Home page needs to be accessed without credential
        - { path: ^/$, role: PUBLIC_ACCESS }

        # Secured part of the site
        # - { path: ^/.*, role: [ROLE_USER] }

        # This config requires being logged for the whole site and having the admin role for the admin part.
        - { path: ^/admin/, role: ROLE_ADMIN }

    # acl:
    #     connection: default

    role_hierarchy:
        ROLE_LOCKED:     ROLE_USER
        ROLE_ADMIN:       [ROLE_LOCKED, ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_ADMIN_DASHBOARD_ACCESS]
        SONATA:
            - ROLE_SONATA_PAGE_ADMIN_PAGE_EDIT  # if you are using acl then this line must be commented
        ROLE_HOME_PAGE_LOGIN: [ROLE_LOGIN_ALLOWED]
#
#when@test:
#    security:
#        password_hashers:
#            # By default, password hashers are resource intensive and take time. This is
#            # important to generate secure password hashes. In tests however, secure hashes
#            # are not important, waste resources and increase test times. The following
#            # reduces the work factor to the lowest possible values.
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon
#>>>>>>> theirs
